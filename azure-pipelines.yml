variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  vmImageName: 'windows-latest'

stages:
- stage: buildandtest
  displayName: Build and Test
  jobs: 
    - job: buildandtest
      displayName: Build and Test
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: UseDotNet@2
        displayName: 'Install .NET Core 3.1 SDK'
        inputs:
          packageType: sdk
          version: 3.1.x
          installationPath: $(Agent.ToolsDirectory)/dotnet
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: build
          projects: 'CloudFlare.Client/CloudFlare.Client.csproj'
          arguments: '--framework:netcoreapp3.1 --configuration $(buildConfiguration)'
      - task: DotNetCoreCLI@2
        displayName: 'Test'
        env:
          ApiKey: $(ApiKey)
          EmailAddress: $(EmailAddress)
        inputs:
          command: test
          projects: 'CloudFlare.Client.Test/CloudFlare.Client.Test.csproj'
          arguments: '--logger trx --framework:netcoreapp3.1 --configuration $(buildConfiguration) --collect "Code coverage"'

- stage: deploy
  displayName: Deploy Nuget
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  jobs: 
    - job: deploy
      displayName: Deploy Nuget
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: DotNetCoreCLI@2
        displayName: 'Pack Release'
        inputs:
          command: pack
          packagesToPack: 'CloudFlare.Client/CloudFlare.Client.csproj'
          packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
          arguments: '--configuration $(buildConfiguration)'
          versioningScheme: 'byEnvVar'
          versionEnvVar: Build.SourceBranchName
          verbosityPack: Diagnostic
      - download: current
        artifact: 'packages'
      - task: NuGetCommand@2
        displayName: 'Deploy Release to nuget.org'
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/*.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'nuget.org'
          verbosityPush: Detailed

