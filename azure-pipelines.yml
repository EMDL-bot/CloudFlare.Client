variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  vmImageName: 'windows-latest'

stages:
- stage: build
  displayName: Build
  jobs: 
  - job: build_netstandard20
    displayName: Build with .Net Standard 2.0 framework
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build with .Net Standard 2.0 framework
      inputs:
        command: build
        projects: 'CloudFlare.Client/CloudFlare.Client.csproj'
        arguments: '--framework:netstandard2.0 --configuration $(buildConfiguration)'
  - job: build_netstandard21
    displayName: Build with .Net Standard 2.1 framework
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build with .Net Standard 2.1 framework
      inputs:
        command: build
        projects: 'CloudFlare.Client/CloudFlare.Client.csproj'
        arguments: '--framework:netstandard2.1 --configuration $(buildConfiguration)'
  - job: build_netcore21
    displayName: Build with .Net Core 2.1 framework
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core 2.1 SDK'
      inputs:
        packageType: sdk
        version: 2.1.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: DotNetCoreCLI@2
      displayName: Build with .Net Core 2.1 framework
      inputs:
        command: build
        projects: 'CloudFlare.Client/CloudFlare.Client.csproj'
        arguments: '--framework:netcoreapp2.1 --configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Test with .Net Core 2.1 framework
      env:
        ApiKey: $(ApiKey)
        EmailAddress: $(EmailAddress)
      inputs:
        command: test
        projects: 'CloudFlare.Client.Test/CloudFlare.Client.Test.csproj'
        arguments: '--logger trx --framework:netcoreapp2.1 --configuration $(buildConfiguration) --collect "Code coverage"'
  - job: build_netcore31
    displayName: Build with .Net Core 3.1 framework
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core 3.1 SDK'
      inputs:
        packageType: sdk
        version: 3.1.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: DotNetCoreCLI@2
      displayName: Build with .Net Core 3.1 framework
      inputs:
        command: build
        projects: 'CloudFlare.Client/CloudFlare.Client.csproj'
        arguments: '--framework:netcoreapp3.1 --configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'Test with .Net Core 3.1 framework'
      env:
        ApiKey: $(ApiKey)
        EmailAddress: $(EmailAddress)
      inputs:
        command: test
        projects: 'CloudFlare.Client.Test/CloudFlare.Client.Test.csproj'
        arguments: '--logger trx --framework:netcoreapp3.1 --configuration $(buildConfiguration) --collect "Code coverage"'
- stage: pack_nuget
  displayName: Pack Nuget
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  jobs: 
    - job: pack_nuget
      displayName: Pack Nuget
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: DotNetCoreCLI@2
        displayName: 'NuGet Pack Release'
        inputs:
          command: pack
          packagesToPack: 'CloudFlare.Client/CloudFlare.Client.csproj'
          packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
          arguments: '--configuration $(buildConfiguration)'
          versioningScheme: 'byEnvVar'
          versionEnvVar: Build.SourceBranchName
          verbosityPack: Diagnostic
- stage: deploy_nuget
  displayName: Deploy to nuget.org
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  jobs: 
    - job: deploy_nuget
      displayName: Deploy to nuget.org
      pool:
        vmImage: $(vmImageName)
      steps:
      - checkout: none
      - download: current
        artifact: 'packages'
      - task: NuGetCommand@2
        displayName: 'Deploy Cloudflare.Clients to nuget.org'
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/*.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'nuget.org'
          verbosityPush: Detailed
